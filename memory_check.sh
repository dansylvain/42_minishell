#!/bin/bash

# Définir le chemin de votre exécutable Minishell
MINISHELL_EXECUTABLE="./minishell"

# Créer un fichier pour stocker les commandes avec fuites de mémoire
LEAKS_OUTPUT_FILE="leaks_output.txt"
> "$LEAKS_OUTPUT_FILE"

# Liste des commandes à tester
commands=(
	"/bin/ls"
	""
	"      				"
	"/bin/ls -a -l"
	"echo -n -n test"
	"rev"
	"cat file"
	"echo hello world"
	"echo -n -n I love pizza"
	"exit"
	"exit 42"
	"exit iugef"
	"exit 42 test"
	"echo $?"
	"/bin/ls fichiernul"
	"echo $? + $?"
	"cat lol.c | cat > lol.c"
	"ls 'includes/' | rev"
	"echo '$USER'"
	"env"
	"export SHELL"
	"export DISPLAY=toto LOGNAME= SHELL"
	"unset SHELL DISPLAY PATH"
	"env jnzf"
	"cd"
	"cd ../../42/minishell_common/includes"
	"cd ."
	"pwd"
	"pwd ../.."
	"./../../42/minishell_common/minishell"
	"echo test >file1 >> file2"
	"cat file | grep bla | more"
	"ls fichiernul | grep bla | more"
	"cat | cat | ls"
	"echo -n -n $USER$LOGNAME"
	"echo -n -n "$USER$LOGNAME""
	"echo "$USER""
	"$USER"

    "/usr/bin/ls"
	"echo $?"
	""
	"echo $?"
	"/usr/bin/ls -al"
	"echo $?"
	"grep -i 'return' src/main.c"
	"echo $?"
	"/usr/bin/cat testfile"
	"echo $?"
	"/bin/grep -i motif /testfile"
	"echo $?"
	"/bin/chmod 755 /testfile"
	"echo $?"
	"/bin/cp /testfile /includes/mon_fichier.txt"
	"echo $?"
	"/bin/mv /testfile /includes/mon_fichier.txt"
	"echo $?"
	"echo bonjour"
	"echo $?"
	"echo     	"
	"echo $?"
	"echo"
	"echo $?"
	"echo -n au revoir"
	"echo $?"
	"ls -a | rev"
	"echo $?"
	"exit 42"
	"echo $?"
	"exit 42hgzef"
	"echo $?"
	"exit 42 jhgzegf"
	"echo $?"
	"exit jhzef"
	"echo $?"
	"ls -a"
	"echo $?"
	"<noexist cat"
	"echo $?"
	"/bin/ls fichiernulachier"
	"echo $?"
	"echo $? + $?"
	"echo $?"
	"ls "includes""
	"echo $?"
	"echo \"cat lol.c | cat > lol.c\""
	"echo $?"
	"ls inclu\"des\""
	"echo $?"
	"l's' '-'"l""
	"echo $?"
	"ls """
	"echo '$USER'"
	"echo $?"
	# "cat includes/minishell.h"
	"echo $?"
	# "cat <includes/minishell.h"
	"echo $?"
	"echo papa >> file1"
	"echo $?"
	"echo maman >> file1"
	"echo $?"
	"cat file1"
	"echo $?"
	"cat file1 | grep papa | more"
	"echo $?"
	"<< end cat|>fileout"
	"echo $?"
	"ls fichiernul | grep bla | more"
	"echo $?"
	"export VAR=tamaman"
	"echo $?"
	"echo $VAR"
	"echo $?"
	"echo $VAR"
	"unset VAR"
	"echo $?"
	"echo $VAR"
	"echo $?"
	"unset PATH"
	"echo $?"
	"ls"
	"echo $?"
	"cd .."
	"pwd"
	"echo $?"
	"cd"
	"echo $?"
	"pwd"
	"echo $?"
	"pwd kzbgkbzekgb"	
	"echo $?"
	"pwd kzbg  kbzekgb"	
	"echo $?"
	"pwd 42 bzekgb"	
	"echo $?"
	# "cat includes/minishell.h"
	"echo $?"
	# "cat ../../42/minishell_common/includes/minishell.h"
	"echo $?"
	"<testfile cat | rev > outfile"
	"echo $?"
	"cat <testfile"
	"echo $?"
	"<outfile cat"
	"echo $?" 
	"<testfile cat | echeo niania | rev > outfile"
	"echo $?"
	"<outfile cat"
	"echo $?"
	"<testfile cat | echo niania | rev > outfile"
	"echo $?"
	"<outfile cat"
	"echo $?" 
	"echo aaa && echo bbb || echo ccc"
	"echo $?"
	"echo aaa || echo bbb || echo ccc"
	"echo $?"
	"echo $?"
	"false && echo bbb || echo ccc"
	"echo $?"
	"false || echo bbb || echo ccc"
	"echo $?"
	"false && echo bbb && echo ccc"
	"echo $?"
	"echo aaa && false && echo ccc"
	"echo $?"
	"<<end <<end"
	"<<end cat"
	"<<end" 
	#"cat | cat | ls"
	"echo $?"
	"echo $"LOGNAME""
	"echo $?"
	"echo $"L"OGNAME"
	"echo $?"
	"echo $LO"G"NAME"
	"echo $?"
	"echo $SHELL"
	"echo $?"
	"echo $LOGNAME$SHELL$"
	"echo $?"
	"echo $LOGNAME$SHELL$ju"
	"echo $?"
	"echo $LOGNAME   $SHELL $"
	"echo $?"
	"echo '$LOGNAME$SHELL$'"
	"echo $?"
	"echo $LOGNAME $SHELL $ $tr"
	"echo $?"
	"echo "$LOGNAME$SHELL$""
	"echo $?"
	"echo \"$LOGNAME$  SHELL $ $thu\""
	"echo $?"
	"echo \"trrt$LOGNAME$  $SHELLtruc SHELL $ $thu\""
	"echo $?"
	"echo \"trrt$LOGNAME$hyu  $SHELLtruc SHELL $ $thu\""
	"echo $?"
	"echo \"trrt$LOGNAME$hyufr$SHELLtruc SHELL $ $thu\""
	"echo $?"
	"echo trrt$LOGNAME$  $SHELLtruc SHELL $ $thu"
	"echo $?"
	"echo \"trrt$LOGNAME'Mach' $'LOGNAME' $SHELLtruc SHELL $ $thu\""
	"echo $?"
	"echo \"trrt$LOGNA'Mach' $LOGNAME'Mach'$LOG $'LOGNA'M''E' $SHELLtruc SHELL $ $thu\""
	"echo $?"
	"echo \"trrt$LOGNA'Mach'p lou$LOGNAME'Mach'$LOG $'LOGNA'M''E'42 $SHELLtruc SHELL $ $thu\""
	"echo $?"
	"echo \"$USER\""
	"echo $?"
	"echo $USER"
	"echo $?"
	"< outfile | rev"
	
	# Insérez vos commandes ici
)

# Fonction pour exécuter une commande avec Valgrind
run_with_valgrind() {
    command="$1"
    # Exécute la commande avec Valgrind dans un sous-shell pour isoler la redirection de la sortie
    valgrind_output=$( (valgrind --trace-children=yes --leak-check=full --show-leak-kinds=all --suppressions=valgrind.supp --suppressions=ls_valgrind.supp "$MINISHELL_EXECUTABLE" <<< "$command") 2>&1 >/dev/null )

    # Vérifier s'il y a des fuites de mémoire dans la sortie de Valgrind
    if echo "$valgrind_output" | grep -q "0x"; then
		echo "---------------------------------------"
		echo "*******************************************************"
        echo "Fuites de mémoire détectées pour la commande: $command"
        echo "*******************************************************"
		echo "Sortie Valgrind:"
        echo "$valgrind_output"
        echo "---------------------------------------"
        echo "Commande: $command" >> "$LEAKS_OUTPUT_FILE"
        echo "Sortie Valgrind:" >> "$LEAKS_OUTPUT_FILE"
        echo "$valgrind_output" >> "$LEAKS_OUTPUT_FILE"
        echo "" >> "$LEAKS_OUTPUT_FILE"
    fi
}

# Exécutez les commandes avec Valgrind et recherchez les fuites de mémoire
for cmd in "${commands[@]}"; do
    run_with_valgrind "$cmd"
done

echo "Analyse des fuites de mémoire terminée."
